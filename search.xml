<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网站搭建</title>
      <link href="/2020/08/21/hello-world/"/>
      <url>/2020/08/21/hello-world/</url>
      
        <content type="html"><![CDATA[<ul><li>Hexo: <a href="https://hexo.io/docs/">doc</a></li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Modify-NPM-image-source"><a href="#Modify-NPM-image-source" class="headerlink" title="Modify NPM image source"></a>Modify NPM image source</h3><pre class=" language-cmd"><code class="language-cmd">npm config set registry https://registry.npm.taobao.org</code></pre><h3 id="Initialize-project"><a href="#Initialize-project" class="headerlink" title="Initialize project"></a>Initialize project</h3><pre class=" language-cmd"><code class="language-cmd">d:cd dev/workspace/hexo       #Enter the workspacecnpm install -g hexo-cli    #Install hexohexo init                   #Initialize projectcode .                      #Open project with VS Code</code></pre><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Project-introduction"><a href="#Project-introduction" class="headerlink" title="Project introduction"></a>Project introduction</h3><pre><code>scaffolds #md mouldsource/_ports  #Articles and pages mdthemes.hexo-theme-matery  #themes  source    medias      banner   #banner img      featureimages   #24 featured pictures  layout    _partial      footer.ejs    #footer info      socila-link.ejs   #Modify social links info      bg-cover-content.ejs  #banner img change js  _config.yml   #Topic related configuration_config.yml     #hexo configuration</code></pre><h3 id="Change-themes"><a href="#Change-themes" class="headerlink" title="Change themes"></a>Change themes</h3><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><ul><li>Modify the value of theme in _config.yml of Hexo’s root folder:</li></ul><pre class=" language-_config.yml"><code class="language-_config.yml">theme: hexo-theme-matery</code></pre><ul><li>More info: <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">Hexo-theme-matery</a></li></ul><h3 id="Code-highlighting"><a href="#Code-highlighting" class="headerlink" title="Code highlighting"></a>Code highlighting</h3><pre><code>cnpm i -S hexo-prism-plugin</code></pre><ul><li>Then,modify the value of highlight.enable to false in _config.yml file of Hexo root folder, and add the configuration of prism plugin as follows:</li></ul><pre class=" language-_config.yml"><code class="language-_config.yml">highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h3 id="Install-hexo-generator-search"><a href="#Install-hexo-generator-search" class="headerlink" title="Install hexo-generator-search"></a>Install hexo-generator-search</h3><pre class=" language-terminal"><code class="language-terminal">npm install hexo-generator-search --save</code></pre><ul><li>Add configuration of _config.yml file in Hexo root folder as follows：</li></ul><pre><code>search:  path: search.xml  field: post</code></pre><h3 id="Translate-Chinese-Link-to-Pinyin-Recommend"><a href="#Translate-Chinese-Link-to-Pinyin-Recommend" class="headerlink" title="Translate Chinese Link to Pinyin (Recommend)"></a>Translate Chinese Link to Pinyin (Recommend)</h3><pre class=" language-terminal"><code class="language-terminal">npm i hexo-permalink-pinyin --save</code></pre><ul><li>Add such configurations in _config.yml file of Hexo:</li></ul><pre class=" language-_config.yml"><code class="language-_config.yml">permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><h3 id="Post-word-count-statistics-plugin"><a href="#Post-word-count-statistics-plugin" class="headerlink" title="Post word count statistics plugin"></a>Post word count statistics plugin</h3><pre class=" language-terminal"><code class="language-terminal">npm i --save hexo-wordcount</code></pre><ul><li>Then just activate the following configuration items in the theme _config.yml file:</li></ul><pre class=" language-themes/hexo-theme-matery/_config.yml"><code class="language-themes/hexo-theme-matery/_config.yml">postInfo:  date: true  update: false  wordCount: false # 设置文章字数统计为 true.  totalCount: false # 设置站点文章总字数统计为 true.  min2read: false # 阅读时长.  readCount: false # 阅读次数.</code></pre><h3 id="Regenerate-the-blog-file"><a href="#Regenerate-the-blog-file" class="headerlink" title="Regenerate the blog file"></a>Regenerate the blog file</h3><pre class=" language-terminal"><code class="language-terminal">hexo clean && hexo ggulp build  #自动化部署</code></pre><h3 id="Modify-website-footer"><a href="#Modify-website-footer" class="headerlink" title="Modify website footer"></a>Modify website footer</h3><ul><li>Website footer may need to be customized, and it is not convenient to make configuration information, So need to modify and process it by yourself. The changes are in the /layout/_partial/footer.ejs file, including the site, the theme used, the amount of traffic and so on.</li></ul><h3 id="Modify-social-links"><a href="#Modify-social-links" class="headerlink" title="Modify social links"></a>Modify social links</h3><ul><li>In the theme _config.yml file, the configurations of QQ, GitHub and mailbox and more are supported by default. In the /layout/_partial/social-link.ejs file of the theme, you can add or modify the social link address as you need. To add a link, please refer to the following code:</li></ul><h3 id="deploy-yml"><a href="#deploy-yml" class="headerlink" title="deploy yml"></a>deploy yml</h3><pre class=" language-_config.yml"><code class="language-_config.yml">deploy:  type: git  repo: https://github.com/willasas/willasas.github.io  branch: master</code></pre><pre class=" language-terminal"><code class="language-terminal">git initgit remote add origin https://github.com/willasas/willasas.github.io.gitnpm install hexo-deployer-gitnpm run deploy</code></pre><h3 id="deploy-GitHub-Page"><a href="#deploy-GitHub-Page" class="headerlink" title="deploy GitHub Page"></a>deploy GitHub Page</h3><ul><li>Select your repository-》settings-》GitHub pages then copy your website address</li></ul><h3 id="Submit-code-to-dev-branch"><a href="#Submit-code-to-dev-branch" class="headerlink" title="Submit code to dev branch"></a>Submit code to dev branch</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -q -b dev  <span class="token comment" spellcheck="true">#创建并切换到dev分支</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"dev demo"</span><span class="token function">git</span> push --set-upstream origin dev  <span class="token comment" spellcheck="true">#设置本地分支追踪远程分支</span></code></pre><h3 id="Submit-code-to-master"><a href="#Submit-code-to-master" class="headerlink" title="Submit code to master"></a>Submit code to master</h3><pre class=" language-terminal"><code class="language-terminal">hexo clean && hexo g  #重新生成代码</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout master  <span class="token comment" spellcheck="true">#切换到master分支</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"master demo"</span><span class="token function">git</span> push --set-upstream origin master  <span class="token comment" spellcheck="true">#设置本地分支追踪远程分支</span></code></pre><h3 id="config-lazyload"><a href="#config-lazyload" class="headerlink" title="config lazyload"></a>config lazyload</h3><ul><li>In the hexo root directory Install hexo-lazyload-image</li></ul><pre class=" language-cmd"><code class="language-cmd">cnpm install hexo-lazyload-image --save</code></pre><pre class=" language-_config.yml"><code class="language-_config.yml">lazyload:  enable: true  onlypost: false  # 是否只对文章的图片做懒加载  loadingImg: # eg ./images/loading.gif</code></pre><h3 id="Code-compression"><a href="#Code-compression" class="headerlink" title="Code compression"></a>Code compression</h3><ul><li>In the hexo root directory Insatll gulp</li></ul><pre class=" language-cmd"><code class="language-cmd"># 全局安装gulp模块cnpm install gulp -g# 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行cnpm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save# 额外的功能模块cnpm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</code></pre><ul><li>Create a new file in the hexo root directory gulpfile.js And copy the following contents into the file, with Chinese notes, which can be modified according to your own needs</li></ul><pre class=" language-gulpfile.js"><code class="language-gulpfile.js">var gulp = require("gulp");var debug = require("gulp-debug");var cleancss = require("gulp-clean-css"); //css压缩组件var uglify = require("gulp-uglify"); //js压缩组件var htmlmin = require("gulp-htmlmin"); //html压缩组件var htmlclean = require("gulp-htmlclean"); //html清理组件var imagemin = require("gulp-imagemin"); //图片压缩组件var changed = require("gulp-changed"); //文件更改校验组件var gulpif = require("gulp-if"); //任务 帮助调用组件var plumber = require("gulp-plumber"); //容错组件（发生错误不跳出任务，并报出错误内容）var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)var isDebug = true; //是否调试显示 编译通过的文件var gulpBabel = require("gulp-babel");var es2015Preset = require("babel-preset-es2015");var del = require("del");var Hexo = require("hexo");var hexo = new Hexo(process.cwd(), &#123;&#125;); // 初始化一个hexo对象// 清除public文件夹gulp.task("clean", function () &#123;    return del(["public/**/*"]);&#125;);// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return// 创建静态页面 （等同 hexo generate）gulp.task("generate", function () &#123;    return hexo.init().then(function () &#123;        return hexo            .call("generate", &#123;                watch: false            &#125;)            .then(function () &#123;                return hexo.exit();            &#125;)            .catch(function (err) &#123;                return hexo.exit(err);            &#125;);    &#125;);&#125;);// 启动Hexo服务器gulp.task("server", function () &#123;    return hexo        .init()        .then(function () &#123;            return hexo.call("server", &#123;&#125;);        &#125;)        .catch(function (err) &#123;            console.log(err);        &#125;);&#125;);// 部署到服务器gulp.task("deploy", function () &#123;    return hexo.init().then(function () &#123;        return hexo            .call("deploy", &#123;                watch: false            &#125;)            .then(function () &#123;                return hexo.exit();            &#125;)            .catch(function (err) &#123;                return hexo.exit(err);            &#125;);    &#125;);&#125;);// 压缩public目录下的js文件gulp.task("compressJs", function () &#123;    return gulp        .src(["./public/**/*.js", "!./public/libs/**"]) //排除的js        .pipe(gulpif(!isScriptAll, changed("./public")))        .pipe(gulpif(isDebug, debug(&#123; title: "Compress JS:" &#125;)))        .pipe(plumber())        .pipe(            gulpBabel(&#123;                presets: [es2015Preset] // es5检查机制            &#125;)        )        .pipe(uglify()) //调用压缩组件方法uglify(),对合并的文件进行压缩        .pipe(gulp.dest("./public")); //输出到目标目录&#125;);// 压缩public目录下的css文件gulp.task("compressCss", function () &#123;    var option = &#123;        rebase: false,        //advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]        compatibility: "ie7" //保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]        //keepBreaks: true, //类型：Boolean 默认：false [是否保留换行]        //keepSpecialComments: '*' //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀    &#125;;    return gulp        .src(["./public/**/*.css", "!./public/**/*.min.css"]) //排除的css        .pipe(gulpif(!isScriptAll, changed("./public")))        .pipe(gulpif(isDebug, debug(&#123; title: "Compress CSS:" &#125;)))        .pipe(plumber())        .pipe(cleancss(option))        .pipe(gulp.dest("./public"));&#125;);// 压缩public目录下的html文件gulp.task("compressHtml", function () &#123;    var cleanOptions = &#123;        protect: /<\!--%fooTemplate\b.*?%-->/g, //忽略处理        unprotect: /<script [^>]*\btype="text\/x-handlebars-template"[\s\S]+?<\/script>/gi //特殊处理    &#125;;    var minOption = &#123;        collapseWhitespace: true, //压缩HTML        collapseBooleanAttributes: true, //省略布尔属性的值 <input checked="true"/> ==> <input />        removeEmptyAttributes: true, //删除所有空格作属性值 <input id="" /> ==> <input />        removeScriptTypeAttributes: true, //删除<script>的type="text/javascript"        removeStyleLinkTypeAttributes: true, //删除<style>和<link>的type="text/css"        removeComments: true, //清除HTML注释        minifyJS: true, //压缩页面JS        minifyCSS: true, //压缩页面CSS        minifyURLs: true //替换页面URL    &#125;;    return gulp        .src("./public/**/*.html")        .pipe(gulpif(isDebug, debug(&#123; title: "Compress HTML:" &#125;)))        .pipe(plumber())        .pipe(htmlclean(cleanOptions))        .pipe(htmlmin(minOption))        .pipe(gulp.dest("./public"));&#125;);// 压缩 public/medias 目录内图片gulp.task("compressImage", function () &#123;    var option = &#123;        optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级）        progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片        interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染        multipass: false //类型：Boolean 默认：false 多次优化svg直到完全优化    &#125;;    return gulp        .src("./public/medias/**/*.*")        .pipe(gulpif(!isScriptAll, changed("./public/medias")))        .pipe(gulpif(isDebug, debug(&#123; title: "Compress Images:" &#125;)))        .pipe(plumber())        .pipe(imagemin(option))        .pipe(gulp.dest("./public"));&#125;);// 执行顺序： 清除public目录 -> 产生原始博客内容 -> 执行压缩混淆 -> 部署到服务器gulp.task(    "build",    gulp.series(        "clean",        "generate",        "compressHtml",        "compressCss",        "compressJs",        "compressImage",        gulp.parallel("deploy")    ));// 默认任务gulp.task(    "default",    gulp.series(        "clean",        "generate",        gulp.parallel("compressHtml", "compressCss", "compressJs","compressImage")    ));//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</code></pre><ul><li>以后的执行方式有两种：<ul><li>直接在 Hexo 根目录执行 gulp 或者 gulp default ，这个命令相当于 hexo cl&amp;&amp;hexo g 并且再把代码和图片压缩。</li><li>在 Hexo 根目录执行 gulp build ，这个命令与第 1 种相比是：在最后又加了个 hexo d ，等于说生成、压缩文件后又帮你自动部署了。</li></ul></li><li>值得注意的是：这个加入了图片压缩，如果不想用图片压缩可以把第 154 行的 “compressImage”, 和第 165 行的 ,”compressImage” 去掉即可</li></ul><h3 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a>Spider</h3><ul><li>In the hexo root directory Insatll spider</li></ul><pre class=" language-cmd"><code class="language-cmd">cnpm install font-spider -g</code></pre><ul><li>Using webfont in CSS</li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*声明 WebFont*/</span><span class="token atrule"><span class="token rule">@font-face</span> &amp;#123<span class="token punctuation">;</span></span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'pinghei'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('../font/pinghei.eot')</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('../font/pinghei.eot?#font-spider')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>, <span class="token url">url('../font/pinghei.woff')</span>            <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>, <span class="token url">url('../font/pinghei.ttf')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>, <span class="token url">url('../font/pinghei.svg')</span>            <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*使用选择器指定字体*/</span><span class="token number">.</span>home h<span class="token number">1</span>,<span class="token number">.</span>demo > <span class="token number">.</span>test &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'pinghei'</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><ul><li>run font-spider</li></ul><pre class=" language-bash"><code class="language-bash">font-spider ./demo/*.html  <span class="token comment" spellcheck="true">#页面依赖的字体将会自动压缩好，原 .ttf 字体会备份</span></code></pre><h3 id="hexo-simple-mindmap"><a href="#hexo-simple-mindmap" class="headerlink" title="hexo-simple-mindmap"></a>hexo-simple-mindmap</h3><ul><li>Install hexo-simple-mindmap</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-simple-mindmap</code></pre><ul><li>Use in arcitle</li></ul><pre><code>&amp;#123;% pullquote mindmap mindmap-md %&amp;#125;- [hexo思维导图使用](https://github.com/HunterXuan/hexo-simple-mindmap)  - 前言  - 操作指南    - 准备需要的文件    - 为主题添加 CSS/JS 文件  - 使用方法&amp;#123;% endpullquote %&amp;#125;</code></pre><h3 id="live2d"><a href="#live2d" class="headerlink" title="live2d"></a><a href="https://github.com/fghrsh/live2d_demo">live2d</a></h3><ul><li>安装插件</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d</code></pre><ul><li>在 hexo 的配置文件_config.yml 中添加如下配置:</li></ul><pre class=" language-yml"><code class="language-yml">live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  debug: false  model:    use: live2d-widget-model-shizuku  display:    position: right    width: 150    height: 300  mobile:    show: true</code></pre><ul><li>下载模型</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save live2d-widget-model-miku<span class="token comment" spellcheck="true"># 其他模型</span>live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-harulive2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wankolive2d-widget-model-z16</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自适应导航页</title>
      <link href="/2020/07/31/flex-layout/"/>
      <url>/2020/07/31/flex-layout/</url>
      
        <content type="html"><![CDATA[<h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><ul><li>This is an example document</li></ul><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><ul><li>Add content…</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown示例</title>
      <link href="/2020/07/30/exp/"/>
      <url>/2020/07/30/exp/</url>
      
        <content type="html"><![CDATA[<h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><ul><li>This is an example document</li></ul><h2 id="Use-xmind"><a href="#Use-xmind" class="headerlink" title="Use xmind"></a>Use xmind</h2><blockquote class="pullquote mindmap mindmap-md"><ul><li><a href="https://willasas.github.io/">博客主页</a><ul><li>前言</li><li>操作指南<ul><li>准备需要的文件</li><li>为主题添加 CSS/JS 文件</li></ul></li><li>使用方法</li></ul></li></ul></blockquote><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><ul><li>Add content…</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Example </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Example </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
